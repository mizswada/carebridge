generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model audit {
  auditID          Int       @id @default(autoincrement())
  auditIP          String?   @db.VarChar(255)
  auditURL         String?   @db.VarChar(255)
  auditURLMethod   String?   @db.VarChar(255)
  auditURLPayload  String?   @db.VarChar(255)
  auditCreatedDate DateTime? @db.DateTime(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model user {
  userID                                          Int                     @id @default(autoincrement())
  userSecretKey                                   String?                 @db.VarChar(255)
  userCategoryCode                                String?                 @db.VarChar(100)
  userUsername                                    String?                 @unique(map: "unique_userUsername") @db.VarChar(255)
  userPassword                                    String?                 @db.VarChar(255)
  userFullName                                    String?                 @db.VarChar(255)
  userEmail                                       String?                 @db.VarChar(255)
  userPhone                                       String?                 @db.VarChar(255)
  userStatus                                      String?                 @db.VarChar(255)
  userIsVerify                                    Int?                    @default(0)
  userCreatedDate                                 DateTime?               @db.DateTime(0)
  userModifiedDate                                DateTime?               @db.DateTime(0)
  activity                                        activity[]
  advertising                                     advertising[]
  donation_donation_donation_user_idTouser        donation[]              @relation("donation_donation_user_idTouser")
  donation_donation_donation_association_idTouser donation[]              @relation("donation_donation_association_idTouser")
  emergency_contacts                              emergency_contacts[]
  equipment                                       equipment[]
  jobs_user_assignation                           jobs_user_assignation[]
  token                                           token[]
  user_association                                user_association[]
  user_care_taker                                 user_care_taker[]
  user_client                                     user_client[]
  user_rehab_center                               user_rehab_center[]
  userrole                                        userrole[]
}

model role {
  roleID           Int        @id @default(autoincrement())
  roleName         String?    @db.VarChar(255)
  roleDescription  String?    @db.VarChar(255)
  roleStatus       String?    @db.VarChar(255)
  roleCreatedDate  DateTime?  @db.DateTime(0)
  roleModifiedDate DateTime?  @db.DateTime(0)
  userrole         userrole[]
}

model lookup {
  lookupID                                                                  Int                     @id @default(autoincrement())
  lookupOrder                                                               Int?
  lookupTitle                                                               String?                 @db.VarChar(255)
  lookupRefCode                                                             String?                 @db.VarChar(255)
  lookupValue                                                               String?                 @db.VarChar(255)
  lookupType                                                                String?                 @db.VarChar(255)
  lookupStatus                                                              String?                 @db.VarChar(255)
  lookupCreatedDate                                                         DateTime?               @db.DateTime(0)
  lookupModifiedDate                                                        DateTime?               @db.DateTime(0)
  activity                                                                  activity[]
  advertising                                                               advertising[]
  donation                                                                  donation[]
  emergency_contacts                                                        emergency_contacts[]
  equipment_equipment_equipment_typeTolookup                                equipment[]             @relation("equipment_equipment_typeTolookup")
  equipment_equipment_equipment_statusTolookup                              equipment[]             @relation("equipment_equipment_statusTolookup")
  jobs_jobs_job_location_stateTolookup                                      jobs[]                  @relation("jobs_job_location_stateTolookup")
  jobs_jobs_job_stayinTolookup                                              jobs[]                  @relation("jobs_job_stayinTolookup")
  jobs_user_assignation_jobs_user_assignation_jobUser_paymentStatusTolookup jobs_user_assignation[] @relation("jobs_user_assignation_jobUser_paymentStatusTolookup")
  jobs_user_assignation_jobs_user_assignation_jobUser_jobStatusTolookup     jobs_user_assignation[] @relation("jobs_user_assignation_jobUser_jobStatusTolookup")
  user_association_user_association_association_address_countryTolookup     user_association[]      @relation("user_association_association_address_countryTolookup")
  user_association_user_association_association_address_stateTolookup       user_association[]      @relation("user_association_association_address_stateTolookup")
  user_association_user_association_association_typeTolookup                user_association[]      @relation("user_association_association_typeTolookup")
  user_care_taker_user_care_taker_address_stateTolookup                     user_care_taker[]       @relation("user_care_taker_address_stateTolookup")
  user_care_taker_user_care_taker_bank_account_nameTolookup                 user_care_taker[]       @relation("user_care_taker_bank_account_nameTolookup")
  user_care_taker_user_care_taker_genderTolookup                            user_care_taker[]       @relation("user_care_taker_genderTolookup")
  user_care_taker_user_care_taker_health_statusTolookup                     user_care_taker[]       @relation("user_care_taker_health_statusTolookup")
  user_care_taker_user_care_taker_nationalityTolookup                       user_care_taker[]       @relation("user_care_taker_nationalityTolookup")
  user_care_taker_user_care_taker_qualificationsTolookup                    user_care_taker[]       @relation("user_care_taker_qualificationsTolookup")
  user_care_taker_user_care_taker_working_hoursTolookup                     user_care_taker[]       @relation("user_care_taker_working_hoursTolookup")
  user_client_user_client_countryTolookup                                   user_client[]           @relation("user_client_countryTolookup")
  user_client_user_client_genderTolookup                                    user_client[]           @relation("user_client_genderTolookup")
  user_client_user_client_stateTolookup                                     user_client[]           @relation("user_client_stateTolookup")
  user_rehab_center_user_rehab_center_center_address_countryTolookup        user_rehab_center[]     @relation("user_rehab_center_center_address_countryTolookup")
  user_rehab_center_user_rehab_center_center_address_stateTolookup          user_rehab_center[]     @relation("user_rehab_center_center_address_stateTolookup")
}

model userrole {
  userRoleID          Int      @id @default(autoincrement())
  userRoleUserID      Int      @default(0)
  userRoleRoleID      Int      @default(0)
  userRoleCreatedDate DateTime @db.DateTime(0)
  role                role     @relation(fields: [userRoleRoleID], references: [roleID], onUpdate: Restrict, map: "FK_userrole_role")
  user                user     @relation(fields: [userRoleUserID], references: [userID], onUpdate: Restrict, map: "FK_userrole_user")

  @@index([userRoleRoleID], map: "FK_userrole_role")
  @@index([userRoleUserID], map: "FK_userrole_user")
}

model activity {
  activity_id        Int       @id @default(autoincrement())
  activity_user_id   Int
  activity_title     String    @db.VarChar(255)
  activity_image     String?   @db.VarChar(255)
  activity_content   String    @db.Text
  activity_media_url String?   @db.VarChar(255)
  activity_status    Int
  created_at         DateTime? @db.Timestamp(0)
  updated_at         DateTime  @default(now()) @db.Timestamp(0)
  deleted_at         DateTime? @db.Timestamp(0)
  user               user      @relation(fields: [activity_user_id], references: [userID], onUpdate: Restrict, map: "activity_ibfk_1")
  lookup             lookup    @relation(fields: [activity_status], references: [lookupID], onUpdate: Restrict, map: "activity_status")

  @@index([activity_status], map: "activity_status")
  @@index([activity_user_id], map: "activity_user_id")
}

model advertising {
  advertising_id        Int       @id @default(autoincrement())
  advertising_user_id   Int
  advertising_image     String?   @db.VarChar(255)
  advertising_media_url String?   @db.VarChar(255)
  advertising_status    Int
  created_at            DateTime? @db.Timestamp(0)
  updated_at            DateTime  @default(now()) @db.Timestamp(0)
  deleted_at            DateTime? @db.Timestamp(0)
  user                  user      @relation(fields: [advertising_user_id], references: [userID], onUpdate: Restrict, map: "advertising_ibfk_1")
  lookup                lookup    @relation(fields: [advertising_status], references: [lookupID], onUpdate: Restrict, map: "advertising_status")

  @@index([advertising_status], map: "advertising_status")
  @@index([advertising_user_id], map: "advertising_user_id")
}

model category {
  category_id       Int                 @id @default(autoincrement())
  type              String              @db.VarChar(100)
  name              String              @db.VarChar(255)
  description       String?             @db.VarChar(255)
  position          Int?
  status            String              @db.VarChar(50)
  created_at        DateTime?           @default(now()) @db.Timestamp(0)
  updated_at        DateTime?           @db.Timestamp(0)
  deleted_at        DateTime?           @db.Timestamp(0)
  jobs              jobs[]
  user_association  user_association[]
  user_rehab_center user_rehab_center[]
}

model donation {
  donation_id                                 Int       @id @default(autoincrement())
  donation_user_id                            Int
  donation_association_id                     Int
  donation_amount                             Decimal   @db.Decimal(10, 2)
  donation_date                               DateTime? @default(now()) @db.DateTime(0)
  donation_status                             Int
  donation_reference_number                   String?   @db.VarChar(100)
  created_at                                  DateTime? @default(now()) @db.Timestamp(0)
  updated_at                                  DateTime? @default(now()) @db.Timestamp(0)
  deleted_at                                  DateTime? @db.Timestamp(0)
  user_donation_donation_user_idTouser        user      @relation("donation_donation_user_idTouser", fields: [donation_user_id], references: [userID], onUpdate: Restrict, map: "donation_ibfk_1")
  user_donation_donation_association_idTouser user      @relation("donation_donation_association_idTouser", fields: [donation_association_id], references: [userID], onUpdate: Restrict, map: "donation_ibfk_2")
  lookup                                      lookup    @relation(fields: [donation_status], references: [lookupID], onUpdate: Restrict, map: "donation_ibfk_3")

  @@index([donation_association_id], map: "donation_association_id")
  @@index([donation_status], map: "donation_status")
  @@index([donation_user_id], map: "donation_user_id")
}

model emergency_contacts {
  contact_id           Int       @id @default(autoincrement())
  contact_user_id      Int
  contact_name         String    @db.VarChar(255)
  contact_relationship Int
  contact_phone_number String    @db.VarChar(20)
  created_at           DateTime? @default(now()) @db.Timestamp(0)
  updated_at           DateTime? @default(now()) @db.Timestamp(0)
  deleted_at           DateTime? @db.Timestamp(0)
  user                 user      @relation(fields: [contact_user_id], references: [userID], onUpdate: Restrict, map: "emergency_contacts_ibfk_1")
  lookup               lookup    @relation(fields: [contact_relationship], references: [lookupID], onUpdate: Restrict, map: "emergency_contacts_ibfk_2")

  @@index([contact_relationship], map: "contact_relationship")
  @@index([contact_user_id], map: "contact_user_id")
}

model equipment {
  equipment_id                              Int       @id @default(autoincrement())
  equipment_user_id                         Int
  equipment_name                            String    @db.VarChar(255)
  equipment_description                     String    @db.Text
  equipment_type                            Int
  equipment_price                           Decimal   @db.Decimal(10, 2)
  equipment_rent_type                       Int?
  equipment_rent_period                     Int?
  equipment_rent_sdate                      DateTime? @db.Date
  equipment_rent_edate                      DateTime? @db.Date
  equipment_pic_name                        String    @db.VarChar(255)
  equipment_pic_phoneNum                    String    @db.VarChar(15)
  equipment_status                          Int?
  created_at                                DateTime? @default(now()) @db.Timestamp(0)
  updated_at                                DateTime? @db.Timestamp(0)
  deleted_at                                DateTime? @db.Timestamp(0)
  user                                      user      @relation(fields: [equipment_user_id], references: [userID], onUpdate: Restrict, map: "equipment_ibfk_1")
  lookup_equipment_equipment_typeTolookup   lookup    @relation("equipment_equipment_typeTolookup", fields: [equipment_type], references: [lookupID], onUpdate: Restrict, map: "equipment_ibfk_2")
  lookup_equipment_equipment_statusTolookup lookup?   @relation("equipment_equipment_statusTolookup", fields: [equipment_status], references: [lookupID], onDelete: Restrict, onUpdate: Restrict, map: "equipment_ibfk_3")

  @@index([equipment_status], map: "equipment_status")
  @@index([equipment_type], map: "equipment_type")
  @@index([equipment_user_id], map: "equipment_user_id")
}

model jobs {
  job_id                                 Int                     @id @default(autoincrement())
  job_category                           Int?
  job_title                              String                  @db.VarChar(255)
  job_location_city                      String?                 @db.VarChar(255)
  job_location_state                     Int?
  job_date                               DateTime?               @db.Date
  job_time                               DateTime?               @db.Time(0)
  job_duration                           Int?
  job_payment                            Decimal?                @db.Decimal(10, 2)
  job_notes                              String?                 @db.Text
  job_stayin                             Int?
  job_status                             String?                 @default("ACTIVE") @db.VarChar(255)
  created_at                             DateTime?               @default(now()) @db.Timestamp(0)
  updated_at                             DateTime?               @default(now()) @db.Timestamp(0)
  deleted_at                             DateTime?               @db.Timestamp(0)
  category                               category?               @relation(fields: [job_category], references: [category_id], onDelete: Restrict, onUpdate: Restrict, map: "jobs_ibfk_1")
  lookup_jobs_job_location_stateTolookup lookup?                 @relation("jobs_job_location_stateTolookup", fields: [job_location_state], references: [lookupID], onDelete: Restrict, onUpdate: Restrict, map: "jobs_ibfk_2")
  lookup_jobs_job_stayinTolookup         lookup?                 @relation("jobs_job_stayinTolookup", fields: [job_stayin], references: [lookupID], onDelete: Restrict, onUpdate: Restrict, map: "jobs_ibfk_3")
  jobs_payment                           jobs_payment[]
  jobs_user_assignation                  jobs_user_assignation[]

  @@index([job_category], map: "job_category")
  @@index([job_location_state], map: "job_location_state")
  @@index([job_stayin], map: "job_stayin")
}

model jobs_user_assignation {
  jobUser_id                                                 Int       @id @default(autoincrement())
  jobUser_jobID                                              Int
  jobUser_userID                                             Int
  jobUser_jobStatus                                          Int
  jobUser_checkIN                                            DateTime? @db.Timestamp(0)
  jobUser_checkOut                                           DateTime? @db.Timestamp(0)
  jobUser_confirmCheckIN                                     DateTime? @db.Timestamp(0)
  jobUser_confirmCheckOut                                    DateTime? @db.Timestamp(0)
  jobUser_paymentStatus                                      Int
  jobUser_paymentTransactionNum                              String    @db.VarChar(255)
  jobUser_paymentProof                                       String?   @db.VarChar(255)
  jobUser_rating                                             Decimal?  @db.Decimal(10, 2)
  jobUser_complain                                           String?   @db.VarChar(255)
  jobUser_complainFeedback                                   String?   @db.VarChar(255)
  jobs                                                       jobs      @relation(fields: [jobUser_jobID], references: [job_id], onUpdate: Restrict, map: "jobUser_jobID")
  lookup_jobs_user_assignation_jobUser_paymentStatusTolookup lookup    @relation("jobs_user_assignation_jobUser_paymentStatusTolookup", fields: [jobUser_paymentStatus], references: [lookupID], onUpdate: Restrict, map: "jobUser_paymentStatus")
  lookup_jobs_user_assignation_jobUser_jobStatusTolookup     lookup    @relation("jobs_user_assignation_jobUser_jobStatusTolookup", fields: [jobUser_jobStatus], references: [lookupID], onUpdate: Restrict, map: "jobUser_status")
  user                                                       user      @relation(fields: [jobUser_userID], references: [userID], onUpdate: Restrict, map: "jobUser_userID")

  @@index([jobUser_jobID], map: "jobUser_jobID")
  @@index([jobUser_paymentStatus], map: "jobUser_paymentStatus")
  @@index([jobUser_userID], map: "jobUser_userID")
  @@index([jobUser_jobStatus], map: "jobUser_status")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model survey_list {
  data_id               Int     @id
  survey_id             String  @default("0") @db.VarChar(255)
  vehicle_number        String  @default("0") @db.VarChar(255)
  vehicle_timein        String? @db.VarChar(255)
  vehicle_timeout       String? @db.VarChar(255)
  project_id            Int?
  project_name          String? @db.VarChar(255)
  project_eecode        String? @db.VarChar(255)
  project_parker_type   String? @db.VarChar(255)
  project_surveyor_name String? @db.VarChar(255)
  ref_id                Int?
  ref_type              String? @db.VarChar(255)
  vehicle_status        String? @db.VarChar(255)
  data_status           String? @db.VarChar(255)
  created_by            String? @db.VarChar(255)
  created_at            String? @db.VarChar(255)
  updated_by            String? @db.VarChar(255)
  updated_at            String? @db.VarChar(255)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model user_association {
  id                                                          Int       @id @default(autoincrement())
  user_id                                                     Int?
  association_category                                        Int
  registration_number                                         String    @db.VarChar(100)
  license_number                                              String?   @db.VarChar(100)
  membership_details                                          String?   @db.VarChar(100)
  establishment_date                                          DateTime? @db.Date
  association_type                                            Int
  objectives                                                  String?   @db.Text
  website                                                     String?   @db.VarChar(255)
  association_logo                                            String?   @db.Text
  operational_area                                            String?   @db.VarChar(100)
  association_address_line1                                   String    @db.VarChar(255)
  association_address_line2                                   String?   @db.VarChar(255)
  association_address_city                                    String    @db.VarChar(255)
  association_address_postcode                                String    @db.VarChar(10)
  association_address_state                                   Int
  association_address_country                                 Int
  pic_name                                                    String    @db.VarChar(255)
  pic_phoneNum                                                String    @db.VarChar(15)
  pic_email                                                   String    @db.VarChar(255)
  document_licenses                                           String    @db.VarChar(255)
  documents_certificates                                      String?   @db.VarChar(255)
  lookup_user_association_association_address_countryTolookup lookup    @relation("user_association_association_address_countryTolookup", fields: [association_address_country], references: [lookupID], onUpdate: Restrict, map: "association_address_country")
  lookup_user_association_association_address_stateTolookup   lookup    @relation("user_association_association_address_stateTolookup", fields: [association_address_state], references: [lookupID], onUpdate: Restrict, map: "association_address_state")
  category                                                    category  @relation(fields: [association_category], references: [category_id], onUpdate: Restrict, map: "association_category")
  lookup_user_association_association_typeTolookup            lookup    @relation("user_association_association_typeTolookup", fields: [association_type], references: [lookupID], onUpdate: Restrict, map: "association_type")
  user                                                        user?     @relation(fields: [user_id], references: [userID], onDelete: Restrict, onUpdate: Restrict, map: "fk_user")

  @@index([association_address_country], map: "association_address_country")
  @@index([association_address_state], map: "association_address_state")
  @@index([association_category], map: "association_category")
  @@index([association_type], map: "association_type")
  @@index([user_id], map: "fk_user")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model user_care_taker {
  id                                               Int       @id @default(autoincrement())
  user_id                                          Int?
  identification_number                            String    @db.VarChar(100)
  date_of_birth                                    DateTime  @db.Date
  gender                                           Int?
  nationality                                      Int?
  address_line_1                                   String    @db.VarChar(255)
  address_line_2                                   String?   @db.VarChar(255)
  address_postcode                                 String    @db.VarChar(10)
  address_city                                     String    @db.VarChar(100)
  address_state                                    Int?
  qualifications                                   Int?
  emergency_contact_name                           String?   @db.VarChar(255)
  emergency_contact_relationship                   String?   @db.VarChar(100)
  emergency_contact_number                         String?   @db.VarChar(50)
  working_hours                                    Int?
  languages_spoken                                 String?   @db.Text
  documents_certificate                            String?   @db.VarChar(255)
  documents_ic                                     String?   @db.VarChar(255)
  health_status                                    Int?
  profile_picture                                  String?   @db.VarChar(255)
  bank_account_name                                Int?
  bank_account_num                                 String?   @db.VarChar(255)
  bank_account_beneficiary                         String?   @db.VarChar(255)
  created_at                                       DateTime  @default(now()) @db.Timestamp(0)
  updated_at                                       DateTime  @default(now()) @db.Timestamp(0)
  deleted_at                                       DateTime? @db.Timestamp(0)
  lookup_user_care_taker_address_stateTolookup     lookup?   @relation("user_care_taker_address_stateTolookup", fields: [address_state], references: [lookupID], onDelete: Restrict, onUpdate: Restrict, map: "address_state")
  lookup_user_care_taker_bank_account_nameTolookup lookup?   @relation("user_care_taker_bank_account_nameTolookup", fields: [bank_account_name], references: [lookupID], onDelete: Restrict, onUpdate: Restrict, map: "bank_account_name")
  user                                             user?     @relation(fields: [user_id], references: [userID], onDelete: Restrict, onUpdate: Restrict, map: "fk_user_id")
  lookup_user_care_taker_genderTolookup            lookup?   @relation("user_care_taker_genderTolookup", fields: [gender], references: [lookupID], onDelete: Restrict, onUpdate: Restrict, map: "gender")
  lookup_user_care_taker_health_statusTolookup     lookup?   @relation("user_care_taker_health_statusTolookup", fields: [health_status], references: [lookupID], onDelete: Restrict, onUpdate: Restrict, map: "health_status")
  lookup_user_care_taker_nationalityTolookup       lookup?   @relation("user_care_taker_nationalityTolookup", fields: [nationality], references: [lookupID], onDelete: Restrict, onUpdate: Restrict, map: "nationality")
  lookup_user_care_taker_qualificationsTolookup    lookup?   @relation("user_care_taker_qualificationsTolookup", fields: [qualifications], references: [lookupID], onDelete: Restrict, onUpdate: Restrict, map: "qualifications")
  lookup_user_care_taker_working_hoursTolookup     lookup?   @relation("user_care_taker_working_hoursTolookup", fields: [working_hours], references: [lookupID], onDelete: Restrict, onUpdate: Restrict, map: "working_hours")

  @@index([address_state], map: "address_state")
  @@index([bank_account_name], map: "bank_account_name")
  @@index([user_id], map: "fk_user_id")
  @@index([gender], map: "gender")
  @@index([health_status], map: "health_status")
  @@index([nationality], map: "nationality")
  @@index([qualifications], map: "qualifications")
  @@index([working_hours], map: "working_hours")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model user_rehab_center {
  id                                                      Int       @id @default(autoincrement())
  user_id                                                 Int?
  center_category                                         Int?
  center_address_line1                                    String    @db.VarChar(255)
  center_address_line2                                    String?   @db.VarChar(255)
  center_address_city                                     String    @db.VarChar(255)
  center_address_postcode                                 String    @db.VarChar(10)
  center_address_state                                    Int
  center_address_country                                  Int
  registration_number                                     String    @db.VarChar(100)
  license_number                                          String    @db.VarChar(100)
  contact_number                                          String?   @db.VarChar(50)
  email_address                                           String?   @db.VarChar(100)
  center_type                                             Int?
  person_in_charge                                        String?   @db.VarChar(255)
  center_capacity                                         Int?
  operational_hours                                       String?   @db.VarChar(100)
  website                                                 String?   @db.VarChar(255)
  documents_Licenses                                      String?   @db.VarChar(255)
  documents_certificates                                  String?   @db.VarChar(255)
  center_description                                      String?   @db.Text
  geolocation                                             String?   @db.VarChar(100)
  lookup_user_rehab_center_center_address_countryTolookup lookup    @relation("user_rehab_center_center_address_countryTolookup", fields: [center_address_country], references: [lookupID], onUpdate: Restrict, map: "center_address_country")
  lookup_user_rehab_center_center_address_stateTolookup   lookup    @relation("user_rehab_center_center_address_stateTolookup", fields: [center_address_state], references: [lookupID], onUpdate: Restrict, map: "center_address_state")
  category                                                category? @relation(fields: [center_type], references: [category_id], onDelete: Restrict, onUpdate: Restrict, map: "center_type")
  user                                                    user?     @relation(fields: [user_id], references: [userID], onDelete: Restrict, onUpdate: Restrict, map: "user_id")

  @@index([center_address_country], map: "center_address_country")
  @@index([center_address_state], map: "center_address_state")
  @@index([center_type], map: "center_type")
  @@index([user_id], map: "user_id")
}

model token {
  tokenID          Int       @id @default(autoincrement())
  tokenUUID        String?   @db.VarChar(255)
  userID           Int?
  tokenType        String?   @db.VarChar(255)
  tokenExpiryDate  DateTime? @db.Date
  tokenStatus      String?   @default("ACTIVE") @db.VarChar(255)
  tokenCreatedDate DateTime? @db.DateTime(0)
  user             user?     @relation(fields: [userID], references: [userID], onDelete: Restrict, onUpdate: Restrict, map: "token_ibfk_1")

  @@index([userID], map: "userID")
}

model jobs_payment {
  job_paymentID                    Int      @id @default(autoincrement())
  jobID                            Int
  job_paymentBillCode              String   @db.VarChar(255)
  job_paymentBillInvoiceNo         String   @db.VarChar(255)
  job_paymentBillExternalInvoiceNo String   @db.VarChar(255)
  job_paymentFPXTransactionID      String   @db.VarChar(255)
  job_paymentType                  String   @db.VarChar(255)
  job_paymentPaymentChannel        String   @db.VarChar(255)
  job_paymentAmount                Float    @db.Float
  job_paymentAmountNett            Float    @db.Float
  job_paymentChargeAmount          Float    @db.Float
  job_paymentBillStatus            Int
  job_paymentFlag                  Int
  created_at                       DateTime @default(dbgenerated("('0000-00-00 00:00:00')")) @db.DateTime(0)
  jobs                             jobs     @relation(fields: [jobID], references: [job_id], onUpdate: Restrict, map: "jobs_payment_ibfk_1")

  @@index([jobID], map: "jobID")
}

model user_client {
  clientID                           Int      @id @default(autoincrement())
  user_id                            Int
  dateOfBirth                        DateTime @db.Date
  gender                             Int
  addressLine1                       String   @db.VarChar(255)
  addressLine2                       String?  @db.VarChar(255)
  city                               String   @db.VarChar(100)
  state                              Int
  country                            Int
  postcode                           String   @db.VarChar(20)
  medicalConditions                  String?  @db.Text
  medications                        String?  @db.Text
  lookup_user_client_countryTolookup lookup   @relation("user_client_countryTolookup", fields: [country], references: [lookupID], onUpdate: Restrict, map: "country")
  lookup_user_client_genderTolookup  lookup   @relation("user_client_genderTolookup", fields: [gender], references: [lookupID], onUpdate: Restrict, map: "fk_gender")
  user                               user     @relation(fields: [user_id], references: [userID], onUpdate: Restrict, map: "fk_user_id_c")
  lookup_user_client_stateTolookup   lookup   @relation("user_client_stateTolookup", fields: [state], references: [lookupID], onUpdate: Restrict, map: "state")

  @@index([country], map: "Country")
  @@index([state], map: "State")
  @@index([gender], map: "fk_gender")
  @@index([user_id], map: "fk_user_id_c")
}
